import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useApp } from '../context/AppContext';
import { llmAPI } from '../services/api';

const GenerateTestsPage = () => {
  const { isAuthenticated } = useAuth();
  const { 
    currentStep, 
    goToStep, 
    selectedFlow, 
    flowDetails, 
    selectedIntents, 
    selectedLanguages,
    testUtterances,
    setTestUtterances
  } = useApp();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState('');
  const [editableUtterances, setEditableUtterances] = useState([]);
  const navigate = useNavigate();

  // Redirect to login if not authenticated or if no flow/intents/languages are selected
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
    } else if (!selectedFlow || !flowDetails) {
      navigate('/select-bot');
    } else if (selectedIntents.length === 0 || selectedLanguages.length === 0) {
      navigate('/select-intents');
    } else if (currentStep !== 5) {
      goToStep(5);
    }
    
    // Set default current language if not set
    if (selectedLanguages.length > 0 && !currentLanguage) {
      setCurrentLanguage(selectedLanguages[0]);
    }
  }, [
    isAuthenticated, 
    navigate, 
    selectedFlow, 
    flowDetails, 
    selectedIntents, 
    selectedLanguages, 
    currentLanguage,
    currentStep,
    goToStep
  ]);

  // Generate test utterances
  const generateUtterances = async (requestMore = false) => {
    if (!currentLanguage) {
      setError('Please select a language');
      return;
    }

    try {
      setLoading(true);
      setError('');

      // Prepare data for LLM API
      const intentsData = selectedIntents.map(intentName => {
        const intent = flowDetails.intents.find(i => i.name === intentName);
        const intentSlots = {};
        
        // Find entities used by this intent
        if (intent && intent.entityReferences) {
          // Get entities that are referenced by this intent
          intent.entityReferences.forEach(entityName => {
            const entity = flowDetails.entities.find(e => e.name === entityName);
            if (entity && entity.values && entity.values.length > 0) {
              // Use the actual values from the entity
              intentSlots[entity.name] = entity.values;
            }
          });
        }
        
        return {
          name: intentName,
          slots: intentSlots
        };
      });

      let response;
      
      if (requestMore && testUtterances[currentLanguage] && testUtterances[currentLanguage].length > 0) {
        // If requesting more utterances, include the existing ones for context
        console.log('[GenerateTests] Requesting more utterances');
        
        // Get the existing utterances for this language
        const existingUtterances = testUtterances[currentLanguage];
        
        // Call LLM API to generate more test utterances
        response = await llmAPI.generateMoreTests({
          intents: intentsData,
          language: currentLanguage,
          existingUtterances: existingUtterances,
          // Include the previous LLM response in the messages array as required
          messages: [
            {
              role: "user",
              content: "You are a conversational AI testing assistant. I will provide you with a list of intents, some of which include slots. Your task is to generate 10 realistic user utterances per intent. The output should be a flat list, where each utterance is labeled with its expected intent and, if applicable, the expected slot(s) and their values.\n\nSome utterances should include slot values naturally, while others should not. Not every utterance is required to mention a slot, even if one is defined. Slot values should be incorporated in a conversational way, like a real customer would speak.\n\n✳️ Mix of Realism and Errors:\n- The utterances should be a **balanced mix** of:\n  - **Correctly written utterances** (natural, grammatically fine)\n  - **Slightly imperfect ones** (informal tone, mild typos, grammar mistakes, or missing punctuation)\n- Do not make all utterances sloppy or typo-heavy; around **40–50%** can have informal issues or typos.\n\n🧾 Output Format:\nReturn a **JSON array of objects**, no explanations, no markdown:\nEach object must have:\n- `utterance`: the user input string\n- `expected_intent`: the name of the intent\n- `expected_slots`: an object showing slot-value pairs (or an empty object if no slots apply)\n\nExample structure:\n{\n  \"utterance\": \"i wanna open a checking accnt\",\n  \"expected_intent\": \"account_opening\",\n  \"expected_slots\": {\n    \"account_type\": \"checking\"\n  }\n}\n\n---\n\n### Example Input:\n\nIntents:\n1. account_opening\n   - Slot: account_type\n     - Type: list\n     - Values: [\"saving\", \"checking\"]\n\n2. activate_card\n   - No slots\n\n3. block_card\n   - No slots\n\nNow generate 10 varied utterances per intent, as described above, mixing formal and informal phrasing."
            },
            {
              role: "assistant",
              content: JSON.stringify(existingUtterances)
            },
            {
              role: "user",
              content: "Generate the next batch, ensuring they are unique and haven't been generated previosuly."
            }
          ]
        });
      } else {
        // Call LLM API to generate initial test utterances
        response = await llmAPI.generateTests({
          intents: intentsData,
          language: currentLanguage
        });
      }

      if (response.data.success) {
        // Update test utterances in context
        const newUtterances = response.data.data;
        
        if (requestMore && testUtterances[currentLanguage]) {
          // If requesting more, combine with existing utterances
          const existingUtterances = testUtterances[currentLanguage];
          const combinedUtterances = [...existingUtterances, ...newUtterances];
          
          // Create a copy for editing
          setEditableUtterances(JSON.parse(JSON.stringify(combinedUtterances)));
          
          // Store in context
          setTestUtterances(prevUtterances => {
            // Update the current language with combined utterances
            const updatedUtterances = { ...prevUtterances };
            updatedUtterances[currentLanguage] = combinedUtterances;
            return updatedUtterances;
          });
        } else {
          // Create a copy for editing
          setEditableUtterances(JSON.parse(JSON.stringify(newUtterances)));
          
          // Store in context
          setTestUtterances(prevUtterances => {
            // Create a new map with the current language
            const updatedUtterances = { ...prevUtterances };
            updatedUtterances[currentLanguage] = newUtterances;
            return updatedUtterances;
          });
        }
      } else {
        setError('Failed to generate test utterances');
      }
    } catch (error) {
      console.error('Error generating test utterances:', error);
      setError('Error generating test utterances. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  // Generate more test utterances
  const generateMoreUtterances = () => {
    generateUtterances(true);
  };

  // Handle language change
  const handleLanguageChange = (e) => {
    const newLanguage = e.target.value;
    setCurrentLanguage(newLanguage);
    
    // If we already have utterances for this language, load them
    if (testUtterances[newLanguage]) {
      setEditableUtterances(JSON.parse(JSON.stringify(testUtterances[newLanguage])));
    } else {
      setEditableUtterances([]);
    }
  };

  // Handle utterance edit
  const handleUtteranceEdit = (index, field, value) => {
    const updatedUtterances = [...editableUtterances];
    
    if (field.startsWith('slot_')) {
      // Handle slot value edit
      const slotName = field.substring(5);
      updatedUtterances[index].expected_slots = updatedUtterances[index].expected_slots || {};
      
      if (value) {
        updatedUtterances[index].expected_slots[slotName] = value;
      } else {
        delete updatedUtterances[index].expected_slots[slotName];
      }
    } else {
      // Handle other fields
      updatedUtterances[index][field] = value;
    }
    
    setEditableUtterances(updatedUtterances);
  };

  // Save edited utterances
  const saveUtterances = () => {
    setTestUtterances(prevUtterances => {
      const updatedUtterances = { ...prevUtterances };
      updatedUtterances[currentLanguage] = editableUtterances;
      return updatedUtterances;
    });
  };

  // Handle continue button click
  const handleContinue = () => {
    // Save any edited utterances
    saveUtterances();
    
    // Go to next step
    goToStep(6);
    navigate('/run-tests');
  };

  // Handle back button click
  const handleBack = () => {
    goToStep(4);
    navigate('/select-intents');
  };

  // Get unique slot names from all utterances
  const getUniqueSlotNames = () => {
    const slotNames = new Set();
    
    // Add slot names from editable utterances
    editableUtterances.forEach(utterance => {
      if (utterance.expected_slots) {
        Object.keys(utterance.expected_slots).forEach(slotName => {
          slotNames.add(slotName);
        });
      }
    });
    
    // Add slot names from selected intents
    selectedIntents.forEach(intentName => {
      const intent = flowDetails.intents.find(i => i.name === intentName);
      if (intent && intent.entityReferences) {
        intent.entityReferences.forEach(entityName => {
          slotNames.add(entityName);
        });
      }
    });
    
    return Array.from(slotNames);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-bold text-gray-900">Generate Tests</h1>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Progress indicator */}
        <div className="px-4 sm:px-0 mb-8">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8" aria-label="Progress">
              <div className="border-blue-500 text-blue-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Login
              </div>
              <div className="border-blue-500 text-blue-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Select Bot
              </div>
              <div className="border-blue-500 text-blue-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Select Intents
              </div>
              <div className="border-blue-500 text-blue-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Generate Tests
              </div>
              <div className="border-transparent text-gray-500 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Run Tests
              </div>
              <div className="border-transparent text-gray-500 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                Results
              </div>
            </nav>
          </div>
        </div>

        <div className="px-4 py-6 sm:px-0">
          <div className="bg-white shadow overflow-hidden sm:rounded-lg">
            <div className="px-4 py-5 sm:px-6">
              <h2 className="text-lg leading-6 font-medium text-gray-900">
                {selectedFlow?.name || 'Selected Flow'}
              </h2>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                Generate and edit test utterances
              </p>
            </div>
            <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
              {error && (
                <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                  {error}
                </div>
              )}

              <div className="mb-6">
                <div className="flex justify-between items-center">
                  <div>
                    <label htmlFor="language" className="block text-sm font-medium text-gray-700">
                      Language
                    </label>
                    <select
                      id="language"
                      name="language"
                      value={currentLanguage}
                      onChange={handleLanguageChange}
                      className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                      disabled={loading}
                    >
                      {selectedLanguages.map((language) => (
                        <option key={language} value={language}>
                          {language}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => generateUtterances(false)}
                      disabled={loading}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      {loading ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Generating...
                        </>
                      ) : testUtterances[currentLanguage] ? (
                        'Regenerate'
                      ) : (
                        'Generate'
                      )}
                    </button>
                    
                    {testUtterances[currentLanguage] && testUtterances[currentLanguage].length > 0 && (
                      <button
                        type="button"
                        onClick={generateMoreUtterances}
                        disabled={loading}
                        className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        {loading ? 'Generating...' : 'Request More Utterances'}
                      </button>
                    )}
                  </div>
                </div>
              </div>

              {/* Test utterances table */}
              {editableUtterances.length > 0 ? (
                <div className="mt-4 overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Utterance
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Expected Intent
                        </th>
                        {getUniqueSlotNames().map(slotName => (
                          <th key={slotName} scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Slot: {slotName}
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {editableUtterances.map((utterance, index) => (
                        <tr key={index}>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <input
                              type="text"
                              value={utterance.text}
                              onChange={(e) => handleUtteranceEdit(index, 'text', e.target.value)}
                              className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            />
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <select
                              value={utterance.expected_intent}
                              onChange={(e) => handleUtteranceEdit(index, 'expected_intent', e.target.value)}
                              className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            >
                              {selectedIntents.map(intent => (
                                <option key={intent} value={intent}>
                                  {intent}
                                </option>
                              ))}
                            </select>
                          </td>
                          {getUniqueSlotNames().map(slotName => (
                            <td key={slotName} className="px-6 py-4 whitespace-nowrap">
                              <input
                                type="text"
                                value={utterance.expected_slots?.[slotName] || ''}
                                onChange={(e) => handleUtteranceEdit(index, `slot_${slotName}`, e.target.value)}
                                className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                              />
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div className="text-center py-12">
                  <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                  </svg>
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No test utterances</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Click the Generate button to create test utterances for this language.
                  </p>
                </div>
              )}

              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={handleBack}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Back
                </button>
                <button
                  type="button"
                  onClick={handleContinue}
                  disabled={Object.keys(testUtterances).length === 0}
                  className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                    Object.keys(testUtterances).length === 0
                      ? 'bg-blue-300 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                  }`}
                >
                  Run Tests
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default GenerateTestsPage;
